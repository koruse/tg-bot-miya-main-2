import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties  # ‚Üê –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

@router.message(commands=["start"])
async def start(msg: Message):
    await msg.answer("–ù—è! –Ø —Ç–≤–æ—è –ú–∏—è-—Ç—è–Ω, —Ç–µ–ª–µ–≥—Ä–∞–º-–Ω—è–Ω—å–∫–∞. –ì–æ—Ç–æ–≤–∞ –ø–∏–Ω–∞—Ç—å —Ç–µ–±—è –∑–∞ –ª–µ–Ω—å!")

@router.message(commands=["help"])
async def help_cmd(msg: Message):
    await msg.answer(
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/todo - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
    )

@router.message(commands=["todo"])
async def todo_cmd(msg: Message):
    task = msg.text[6:].strip()
    if not task:
        await msg.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –¥—É—Ä—ã–Ω–¥–∞!\n–ü—Ä–∏–º–µ—Ä: /todo –∫—É–ø–∏—Ç—å –ø—Ä–æ—Ç–µ–∏–Ω")
        return
    with open("tasks.txt", "a", encoding="utf-8") as f:
        f.write(f"- {task}\n")
    await msg.answer("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üìù")

@router.message(commands=["tasks"])
async def list_tasks(msg: Message):
    if not os.path.exists("tasks.txt"):
        await msg.answer("–ó–∞–¥–∞—á –Ω–µ—Ç! –¢—ã –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–º–æ! üò§")
        return
    with open("tasks.txt", encoding="utf-8") as f:
        tasks = f.read()
    await msg.answer("–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + tasks)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
